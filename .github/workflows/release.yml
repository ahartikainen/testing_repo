name: ReleaseArviZ

on:
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New major, minor, patch or custom release'
        options: 
        - major
        - minor
        - patch
        - custom
        required: true
      custom_version:
        description: 'New custom release version'
        required: false

jobs:
  release-arviz:
    name: Publish release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
      fail-fast: false
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      
      - name: Current version
        run: | 
          echo "CURRENT_ARVIZ_VERSION=$(sed -n 's/^.*__version__\s*=\s*\"\(.*\)\"\.*$/\1/p' arviz/__init__.py)" >> $GITHUB_ENV
        
        
      - name: Split current version
        run: | 
          echo "CURRENT_ARVIZ_VERSION_MAJOR=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\1/p')" >> $GITHUB_ENV
          echo "CURRENT_ARVIZ_VERSION_MINOR=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\2/p')" >> $GITHUB_ENV
          echo "CURRENT_ARVIZ_VERSION_PATCH=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\3/p')" >> $GITHUB_ENV
          
          
      - name: Calculate the new version
        if: "contains(github.event.inputs.new_version, 'major')"
        run: |
          echo ${{ env.CURRENT_ARVIZ_VERSION }}
          echo ${{ env.CURRENT_ARVIZ_VERSION_MAJOR }}
          echo ${{ env.CURRENT_ARVIZ_VERSION_MINOR }}
          echo ${{ env.CURRENT_ARVIZ_VERSION_PATCH }}
          
