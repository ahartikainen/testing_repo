name: ReleaseArviZ

on:
  workflow_dispatch:
    inputs:
      new_version:
        type: choice
        description: 'New major, minor, patch or custom release'
        options: 
        - major
        - minor
        - patch
        - custom
        required: true
      custom_version:
        description: 'New custom release version'
        required: false
      upload_pypi:
        type: boolean
        description: 'Upload release to PyPI'
        required: true
        default: true

jobs:
  release-arviz:
    name: Publish release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
      fail-fast: false
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Current version
        run: | 
          echo "CURRENT_ARVIZ_VERSION=$(sed -n 's/^.*__version__\s*=\s*[\"\'\\'\']*\(.*\)[\"\'\\'\']*.*$/\1/p' arviz/__init__.py)" >> $GITHUB_ENV
        
        
      - name: Split current version
        run: | 
          echo "ARVIZ_OLD_MAJOR=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\1/p')" >> $GITHUB_ENV
          echo "ARVIZ_OLD_MINOR=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\2/p')" >> $GITHUB_ENV
          echo "ARVIZ_OLD_PATCH=$(echo ${{ env.CURRENT_ARVIZ_VERSION }} | sed -n 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\3/p')" >> $GITHUB_ENV
          
          
      - name: Calculate the new version (major)
        if: "contains(github.event.inputs.new_version, 'major')"
        run: |
          echo "NEW_ARVIZ_VERSION=$(echo $((${{ env.ARVIZ_OLD_MAJOR }} + 1)).${{ env.ARVIZ_OLD_MINOR }}.${{ env.ARVIZ_OLD_PATCH }})" >> $GITHUB_ENV
                    
        
      - name: Calculate the new version (minor)
        if: "contains(github.event.inputs.new_version, 'minor')"
        run: |
          echo "NEW_ARVIZ_VERSION=$(echo ${{ env.ARVIZ_OLD_MAJOR }}.$((${{ env.ARVIZ_OLD_MINOR }} + 1)).${{ env.ARVIZ_OLD_PATCH }})" >> $GITHUB_ENV
          
          
      - name: Calculate the new version (patch)
        if: "contains(github.event.inputs.new_version, 'patch')"
        run: |
          echo "NEW_ARVIZ_VERSION=$(echo ${{ env.ARVIZ_OLD_MAJOR }}.${{ env.ARVIZ_OLD_MINOR }}.$((${{ env.ARVIZ_OLD_PATCH }} + 1)))" >> $GITHUB_ENV
      
      
      - name: Calculate the new version (custom)
        if: "contains(github.event.inputs.new_version, 'custom')"
        run: |
          echo "NEW_ARVIZ_VERSION=${{ github.event.inputs.new_version }}" >> $GITHUB_ENV
          
      - name: Validate version format
        run: |
          echo Current ${{ env.CURRENT_ARVIZ_VERSION }} 
          echo New ${{ env.NEW_ARVIZ_VERSION }} 
          echo Major ${{ env.ARVIZ_OLD_MAJOR }} 
          echo Minor ${{ env.ARVIZ_OLD_MINOR }} 
          echo Patch ${{ env.ARVIZ_OLD_PATCH }} 
          
      - name: Check new version
        if: ${{ env.NEW_ARVIZ_VERSION == '' }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Invalid version name: ${{ env.NEW_ARVIZ_VERSION }}')

              
      - name: Install dependencies (python)
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install --no-cache-dir -r requirements.txt
          python -m pip install twine
 
      - name: Setup git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Create release branch
        run: |
          git checkout -b release/v${{ env.NEW_ARVIZ_VERSION }}

          sed -i 's/^__version__ = .*$/__version__ = "${{ env.NEW_ARVIZ_VERSION }}"/g' arviz/__init__.py
          
          git add .
          git commit -m "release/v${{ env.NEW_ARVIZ_VERSION }}: updating version numbers"
          git push -u origin release/v${{ env.NEW_ARVIZ_VERSION }}
          
      - name: Merge into main
        run: |
          git checkout main
          git reset --hard release/v${{ env.NEW_ARVIZ_VERSION }}
          git push origin main
          git branch --delete release/v${{ env.NEW_ARVIZ_VERSION }}
          # git push origin --delete release/v${{ env.NEW_ARVIZ_VERSION }}

      - name: Tag version
        run: |
          git checkout main
          git tag -a "v${{ env.NEW_ARVIZ_VERSION }}" -m "Tagging v${{ env.NEW_ARVIZ_VERSION }}"
          git push origin "v${{ env.NEW_ARVIZ_VERSION }}"
      
      #- name: Build wheel
      #  run: python setup.py sdist bdist_wheel

      #- name: Install bdist_wheel
      #  run: pip install dist/*.whl
      
      #- name: Upload to pypi
      #  if: success()
      #  env:
      #    TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #    TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #  run: python -m twine upload -u ${TWINE_USERNAME} -p ${TWINE_PASSWORD} --skip-existing dist/*
        
      - name: Rename version to dev
        run: |
          git checkout -b rename/v${{ env.NEW_ARVIZ_VERSION }}

          sed -i 's/^__version__ = .*$/__version__ = "${{ env.NEW_ARVIZ_VERSION }}-dev"/g' arviz/__init__.py
          
          git add .
          git commit -m "rename/v${{ env.NEW_ARVIZ_VERSION }}: updating version to dev"
          git push -u origin rename/v${{ env.NEW_ARVIZ_VERSION }}
          
      - name: Merge rename into main
        run: |
          git checkout main
          git reset --hard rename/v${{ env.NEW_ARVIZ_VERSION }}
          git push origin main
          #git branch --delete rename/v${{ env.NEW_ARVIZ_VERSION }}
          #git push origin --delete rename/v${{ env.NEW_ARVIZ_VERSION }}
